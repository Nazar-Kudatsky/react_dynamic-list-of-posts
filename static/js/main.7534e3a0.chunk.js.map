{"version":3,"sources":["api/api.js","api/message.js","components/PostsList/PostsList.jsx","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/Loader/Loader.jsx","components/PostDetails/PostDetails.jsx","App.jsx","api/users.js","index.js"],"names":["BASE_URL","getUserPosts","fetch","then","response","json","PostsList","selectedUser","setPostId","useState","userPosts","setUserPosts","postIsSelected","setSelectedPost","useEffect","result","data","filter","post","userId","className","map","user","key","id","title","type","onClick","addComment","postId","nameInput","emailInput","bodyInput","method","body","JSON","stringify","name","email","headers","NewCommentForm","loadPostComments","setNameInput","setEmailInput","setBodyInput","onSubmit","event","a","preventDefault","placeholder","value","onChange","target","Loader","PostDetails","selectedPostId","setPost","comments","setComments","commentsVisibility","setCommentsVisibility","loadPostDetails","postFromServer","commentsFromServer","comment","length","commentId","App","setUser","users","setUsers","usersFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7534e3a0.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = () => fetch(`${BASE_URL}/posts`)\n  .then(response => response.json());\n\nexport const getPostDetails = postId => fetch(`${BASE_URL}/posts/${postId}`)\n  .then(response => response.json());\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getUserPosts } from '../../api/message';\n\nimport './PostsList.scss';\n\nexport const PostsList = ({ selectedUser, setPostId }) => {\n  const [userPosts, setUserPosts] = useState();\n  const [postIsSelected, setSelectedPost] = useState(false);\n\n  useEffect(() => {\n    getUserPosts()\n      .then((result) => {\n        setUserPosts(result.data);\n      });\n  }, []);\n\n  useEffect(() => {\n    getUserPosts()\n      .then((result) => {\n        setUserPosts(() => {\n          if (+selectedUser === 0) {\n            return result.data;\n          }\n\n          return result.data.filter(post => post.userId === +selectedUser);\n        });\n      });\n  }, [selectedUser]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      {userPosts\n        && (\n        <ul className=\"PostsList__list\">\n          {userPosts.map(user => (\n            <li className=\"PostsList__item\" key={user.id}>\n              <div>\n                <b>\n                  {`[User # ${user.userId}]: `}\n                </b>\n                {user.title}\n              </div>\n              {user.id === postIsSelected ? (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button PostsList__button--active\"\n                  onClick={() => {\n                    setSelectedPost(null);\n                    setPostId(null);\n                  }}\n                >\n                  Close\n                </button>\n              ) : (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => {\n                    setSelectedPost(user.id);\n                    setPostId(user.id);\n                  }}\n                >\n                  Open\n                </button>\n              )}\n            </li>\n          ))}\n        </ul>\n        )\n      }\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  selectedUser: PropTypes.string.isRequired,\n  setPostId: PropTypes.func.isRequired,\n};\n","import { BASE_URL } from './api';\n\nexport const getPostComments = () => fetch(`${BASE_URL}/comments`)\n  .then(response => response.json());\n\nexport const removePostComment = commentId => fetch(\n  `${BASE_URL}/comments/${commentId}`,\n  { method: 'DELETE' },\n);\n\nexport const addComment = (\n  postId,\n  { nameInput, emailInput, bodyInput },\n) => fetch(\n  `${BASE_URL}/comments`,\n  {\n    method: 'POST',\n    body: JSON.stringify({\n      postId,\n      name: nameInput,\n      email: emailInput,\n      body: bodyInput,\n    }),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  },\n);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { addComment } from '../../api/comments';\n\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId, loadPostComments }) => {\n  const [nameInput, setNameInput] = useState('');\n  const [emailInput, setEmailInput] = useState('');\n  const [bodyInput, setBodyInput] = useState('');\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={async(event) => {\n        event.preventDefault();\n\n        const isEmptyFields = !nameInput || !emailInput || !bodyInput;\n\n        if (isEmptyFields) {\n          return;\n        }\n\n        await addComment(postId, {\n          nameInput, emailInput, bodyInput,\n        });\n\n        await loadPostComments();\n\n        setNameInput('');\n        setEmailInput('');\n        setBodyInput('');\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={nameInput}\n          onChange={event => setNameInput(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={emailInput}\n          onChange={event => setEmailInput(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={bodyInput}\n          onChange={event => setBodyInput(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  loadPostComments: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getPostDetails } from '../../api/message';\nimport { getPostComments, removePostComment } from '../../api/comments';\n\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Loader } from '../Loader';\n\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [post, setPost] = useState(null);\n  const [comments, setComments] = useState(null);\n  const [commentsVisibility, setCommentsVisibility] = useState(false);\n\n  useEffect(() => {\n    setComments(null);\n    setPost(null);\n\n    loadPostDetails();\n    loadPostComments();\n  }, [selectedPostId]);\n\n  const loadPostDetails = () => {\n    getPostDetails(selectedPostId)\n      .then((postFromServer) => {\n        setPost(postFromServer.data);\n      });\n  };\n\n  const loadPostComments = () => {\n    setComments(null);\n    getPostComments()\n      .then((commentsFromServer) => {\n        setComments(commentsFromServer.data\n          .filter(comment => comment.postId === selectedPostId));\n      });\n  };\n\n  return (\n    !post ? (\n      <div className=\"NoPosts\">\n        <h1>NO POSTS</h1>\n      </div>\n    ) : (\n      <div className=\"PostDetails\">\n        <h2>Post details:</h2>\n\n        <section className=\"PostDetails__post\">\n          <p>{post.title}</p>\n        </section>\n\n        <section className=\"PostDetails__comments\">\n          {commentsVisibility ? (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => setCommentsVisibility(false)}\n            >\n              {`Show ${comments ? comments.length : ''} comments`}\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => setCommentsVisibility(true)}\n            >\n              {`Hide ${comments ? comments.length : ''} comments`}\n            </button>\n          )}\n\n          <ul className=\"PostDetails__list\">\n            {!comments ? (\n              <Loader />\n            ) : (\n              commentsVisibility\n              || comments\n                .map(comment => (\n                  <li className=\"PostDetails__list-item\" key={comment.id}>\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={async() => {\n                        await removePostComment(comment.id);\n                        await loadPostComments();\n                      }}\n                    >\n                      X\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                )))}\n          </ul>\n        </section>\n\n        <section>\n          <div className=\"PostDetails__form-wrapper\">\n            <NewCommentForm\n              postId={selectedPostId}\n              setComments={setComments}\n              loadPostComments={loadPostComments}\n            />\n          </div>\n        </section>\n      </div>\n    )\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { getUsers } from './api/users';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App = () => {\n  const [selectedUser, setUser] = useState('');\n  const [selectedPostId, setPostId] = useState(null);\n  const [users, setUsers] = useState('');\n\n  useEffect(() => {\n    getUsers()\n      .then(usersFromServer => setUsers(usersFromServer.data));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={event => setUser(event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            {!users || users.map(user => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUser={selectedUser}\n            setPostId={setPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId\n          && (\n          <PostDetails\n            selectedPostId={selectedPostId}\n          />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { BASE_URL } from './api';\n\nexport const getUsers = () => fetch(`${BASE_URL}/users`)\n  .then(response => response.json());\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}